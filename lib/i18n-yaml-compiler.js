/* global require, module */

const yaml = require('js-yaml');
const fs = require('fs');
const chalk = require('chalk');

class I18nYamlCompiler {
  constructor(options, ui) {
    this.options = options;
    this.ui = ui;
  }

  compile() {
    let files = getYamlFiles(this.options.sourceDir);
    let translations = this.extractTranslations(files);

    this.exportTranslations(translations);
  }

  extractTranslations(files) {
    let translations = {};

    files.forEach((name) => {
      let matchs = name.match(/^translations_([^_]+).yml$/);
      let locale = matchs[1];

      let path = `${this.options.sourceDir}/${name}`;

      translations[locale] = getJson(path);
    });

    this.ui.writeLine(chalk.green('Yaml translations extracted...'));

    return translations;
  }

  exportTranslations(translations) {
    const distDir = this.options.distDir;

    if (!fs.existsSync(distDir)) {
      fs.mkdirSync(distDir);
    }

    Object.keys(translations).forEach((locale) => {
      let localePath = `${distDir}/${locale}`;

      if (!fs.existsSync(localePath)) {
        fs.mkdirSync(localePath);
      }

      let json = JSON.stringify(translations[locale], null, 2);
      let content = `// This translation is auto-generated by ember-i18n-yaml

export default ${json};
      `;

      fs.writeFileSync(`${localePath}/translations.js`, content);
      this.ui.writeLine(chalk.green(`Translation "${locale}" exported.`));
    });
  }
}

function getYamlFiles(dir) {
  if (!fs.existsSync(dir)) {
    return [];
  }

  let files = fs.readdirSync(dir);

  return files.filter(function (name) {
    return name.match(/^translations_([^_]+)\.yml$/);
  });
}

function getJson(filepath){
  var file = fs.readFileSync(filepath,'utf8');
  return yaml.safeLoad(file);
}

module.exports = I18nYamlCompiler;
